// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

generator client {
  provider = "prisma-client-js"
  output   = "../generated/client"
}

// User model with role-based access
model User {
  id            String       @id @default(uuid())
  name          String
  email         String       @unique
  role          UserRole     @default(STUDENT)
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt

  // Relations
  enrollments   Enrollment[]
  ownedCourses  Course[]     @relation("CourseInstructor")
  submissions   Submission[]
  feedback      Feedback[]
}

enum UserRole {
  STUDENT
  INSTRUCTOR
  ADMIN
}

// Course model
model Course {
  id            String       @id @default(uuid())
  title         String
  description   String?
  code          String       @unique // e.g., "CS101"
  instructorId  String
  isActive      Boolean      @default(true)
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt

  // Relations
  instructor    User         @relation("CourseInstructor", fields: [instructorId], references: [id])
  enrollments   Enrollment[]
  assignments   Assignment[]
}

// Enrollment connects users to courses
model Enrollment {
  id            String       @id @default(uuid())
  userId        String
  courseId      String
  enrolledAt    DateTime     @default(now())

  // Relations
  user          User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  course        Course       @relation(fields: [courseId], references: [id], onDelete: Cascade)

  @@unique([userId, courseId])
}

// Assignment model
model Assignment {
  id            String       @id @default(uuid())
  courseId      String
  title         String
  description   String?
  dueDate       DateTime?
  isPublished   Boolean      @default(false)
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt

  // Relations
  course        Course       @relation(fields: [courseId], references: [id], onDelete: Cascade)
  problems      Problem[]
}

// Problem model - individual questions within assignments
model Problem {
  id            String       @id @default(uuid())
  assignmentId  String
  title         String
  prompt        String       @db.Text
  points        Int          @default(10)
  orderIndex    Int          @default(0)

  // Relations
  assignment    Assignment   @relation(fields: [assignmentId], references: [id], onDelete: Cascade)
  submissions   Submission[]
}

// Submission model with support for different types
model Submission {
  id            String       @id @default(uuid())
  problemId     String
  userId        String
  type          SubmissionType

  // Content fields based on type
  fileUri       String?      // For FILE type
  shortText     String?      @db.Text // For SHORT_TEXT type
  code          String?      @db.Text // For CODE_REFLECTION type
  reflection    String?      @db.Text // For CODE_REFLECTION type

  submittedAt   DateTime     @default(now())
  updatedAt     DateTime     @updatedAt

  // Relations
  problem       Problem      @relation(fields: [problemId], references: [id], onDelete: Cascade)
  user          User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  feedback      Feedback[]
  grade         Grade?

  @@unique([problemId, userId])
}

enum SubmissionType {
  FILE
  SHORT_TEXT
  CODE_REFLECTION // Special type: code + reflection
}

// Feedback model for comments on submissions
model Feedback {
  id            String       @id @default(uuid())
  submissionId  String
  authorId      String
  comment       String       @db.Text
  createdAt     DateTime     @default(now())

  // Relations
  submission    Submission   @relation(fields: [submissionId], references: [id], onDelete: Cascade)
  author        User         @relation(fields: [authorId], references: [id], onDelete: Cascade)
}

// Grade model
model Grade {
  id            String       @id @default(uuid())
  submissionId  String       @unique
  score         Int
  maxScore      Int
  releasedAt    DateTime?
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt

  // Relations
  submission    Submission   @relation(fields: [submissionId], references: [id], onDelete: Cascade)
}
